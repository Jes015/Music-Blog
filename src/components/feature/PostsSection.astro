---
interface Props {
    className?: string;
}

import { Post } from "@/components/feature"
import { SectionLayout } from "@/components/layouts"
import type { IPost, TPostArray, UUID } from "@/models"
import { getCollection, getEntry } from "astro:content"
const posts = await getCollection("posts");

const data: TPostArray = [];

await Promise.allSettled(
    posts.map(async (postCollection) => {
        let post: IPost | null = null;

        const publisherEntry = await getEntry(postCollection.data.publisher);

        post = {
            ...postCollection.data,
            id: postCollection.data.id as UUID,
            publisher: {
                ...publisherEntry.data,
                id: publisherEntry.data.id as UUID,
            },
        };

        data.push(post);
    }),
);

const felicidadPost = structuredClone(
    data.find(
        (post) => post.id === "c105a107-17f1-4dd0-bf97-3ddfbae66dbe",
    ) as IPost,
);
felicidadPost.id = "pinned-pinned-pinned-pinned-pinned";

const { className } = Astro.props;
---

<SectionLayout className={[className, "pb-72"].join(" ")} title="Posts">
    <Post data={felicidadPost} isPinned client:load />
    {
        data
            .sort((a, b) => b.publishDate - a.publishDate)
            .map((post) => <Post data={post} client:load />)
    }
</SectionLayout>
